(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{485:function(_,v,t){"use strict";t.r(v);var l=t(11),e=Object(l.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h2",{attrs:{id:"_1-输入-url-访问网页的全过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-输入-url-访问网页的全过程"}},[_._v("#")]),_._v(" 1 输入 URL 访问网页的全过程")]),_._v(" "),v("ol",[v("li",[v("p",[v("strong",[_._v("DNS 查询请求")]),_._v("：浏览器发起 DNS（域名解析系统）查询请求")]),_._v(" "),v("ul",[v("li",[_._v("DNS 监听 53 端口来获取域名解析请求")]),_._v(" "),v("li",[_._v("浏览器缓存：寻找浏览器的 DNS 缓存记录")]),_._v(" "),v("li",[_._v("系统缓存：浏览器做系统调用")]),_._v(" "),v("li",[_._v("路由器缓存")]),_._v(" "),v("li",[_._v("ISP DNS 缓存")]),_._v(" "),v("li",[_._v("递归搜索")])])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("TCP 连接")]),_._v("：建立TCP 连接")]),_._v(" "),v("ul",[v("li",[_._v("浏览器通过 DNS 获取 web 服务器的 IP 地址")]),_._v(" "),v("li",[_._v("向服务器发起 TCP 连接请求")]),_._v(" "),v("li",[_._v("三次握手后，浏览器发送 HTTP 请求数据给服务器")])])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("HTTP 请求")]),_._v("：浏览器向 web 服务器发送 HTTP 请求")]),_._v(" "),v("ul",[v("li",[_._v("一个 HTTP 事务由一条请求命令和一个响应结果组成")]),_._v(" "),v("li",[_._v("请求头常见字段："),v("code",[_._v("host")]),_._v("（服务器域名端口）、"),v("code",[_._v("connection")]),_._v("（设置当前连接和 hop-by-hop 协议请求字段列表的控制选项）、"),v("code",[_._v("accept")]),_._v("（设置接受的内容类型）、"),v("code",[_._v("user-agent")]),_._v("（用户代理的字符串值）、"),v("code",[_._v("accept-encoding")]),_._v("（接受编码格式）、"),v("code",[_._v("accept-language")]),_._v("（接受语言）、"),v("code",[_._v("cache-control")]),_._v("（设置请求响应链上所有的缓存机制必须遵守的指令）、"),v("code",[_._v("cookie")]),_._v("（发送 cookie）等")])])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("响应")]),_._v("：服务器发送响应数据给客户端")]),_._v(" "),v("ul",[v("li",[_._v("服务器监听 80 端口，获取客户端 HTTP 请求")]),_._v(" "),v("li",[_._v("服务器接受客户端数据并进行 HTTP 解码")]),_._v(" "),v("li",[_._v("服务器根据 HTTP 请求头信息，得到响应数据给客户端")])])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("解析响应")]),_._v("：浏览器解析 HTTP 响应")]),_._v(" "),v("ul",[v("li",[_._v("HTML 解析")]),_._v(" "),v("li",[_._v("获取嵌入 HTML 的对象（如 CSS 文件、图片资源）")]),_._v(" "),v("li",[_._v("CSS 解析")]),_._v(" "),v("li",[_._v("JS 解析")])])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("关闭 TCP 连接")]),_._v("：关闭 TCP 连接")]),_._v(" "),v("ul",[v("li",[_._v("通过四次挥手，关闭 TCP 连接")]),_._v(" "),v("li",[_._v("如果 "),v("code",[_._v("connection")]),_._v(" 为 "),v("code",[_._v("keep-alive")]),_._v(" 不会马上关闭连接")])])])]),_._v(" "),v("p",[_._v("参考：")]),_._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://blog.csdn.net/angle_chen123/article/details/85335244",target:"_blank",rel:"noopener noreferrer"}},[_._v("https://blog.csdn.net/angle_chen123/article/details/85335244"),v("OutboundLink")],1)])]),_._v(" "),v("h2",{attrs:{id:"_2-浏览器渲染页面的步骤"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-浏览器渲染页面的步骤"}},[_._v("#")]),_._v(" 2 浏览器渲染页面的步骤")]),_._v(" "),v("ol",[v("li",[v("strong",[_._v("HTML 解析")]),_._v("：浏览器拿到 HTML，通过 HTML 解析器将 HTML 转换成 DOM 树")]),_._v(" "),v("li",[v("strong",[_._v("CSS 解析")]),_._v("：通过 CSS 解析器，将 CSS 样式转换成 stylesheet（CSS 规则树）")]),_._v(" "),v("li",[v("strong",[_._v("布局树")]),_._v("：根据 DOM 树和 stylesheet 创建布局树（渲染树）")]),_._v(" "),v("li",[v("strong",[_._v("渲染")]),_._v("：计算每个布局树节点的大小和位置，画出节点，最后 GPU 进行 paint 绘制在屏幕上\n"),v("ul",[v("li",[_._v("对布局树进行分层，为每个图层生成绘制列表，再将图层分成图块，紧接着光栅化将图块转换成位图，最后合成绘制生成页面")])])])]),_._v(" "),v("div",{staticClass:"custom-block note"},[v("p",{staticClass:"custom-block-title"},[_._v("分层的目的")]),_._v(" "),v("p",[_._v("避免整个页面渲染，把页面分成多个图层，尤其是动画的时候，把动画独立出一个图层，渲染时只渲染该图层就 ok，transform，z-index 等，浏览器会自动优化生成图层。")])]),_._v(" "),v("div",{staticClass:"custom-block note"},[v("p",{staticClass:"custom-block-title"},[_._v("光栅化目的")]),_._v(" "),v("p",[_._v("页面如果很长但是可视区很小，避免渲染非可视区的样式造成资源浪费，所以将每个图层又划分成多个小个子，当前只渲染可视区附近区域。")])])])}),[],!1,null,null,null);v.default=e.exports}}]);